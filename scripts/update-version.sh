#!/bin/bash

# Skrypt do aktualizacji wersji projektu
# U≈ºycie: ./scripts/update-version.sh [patch|minor|major|build]

# Kolory dla output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Sprawd≈∫ czy podano argument
if [ $# -eq 0 ]; then
    echo -e "${RED}‚ùå U≈ºycie: $0 [patch|minor|major|build]${NC}"
    echo ""
    echo "Przyk≈Çady:"
    echo "  $0 patch    # 1.2.3 -> 1.2.4"
    echo "  $0 minor    # 1.2.3 -> 1.3.0"
    echo "  $0 major    # 1.2.3 -> 2.0.0"
    echo "  $0 build    # 1.2.3 build 0 -> 1.2.3 build 1"
    exit 1
fi

VERSION_TYPE=$1

# Sprawd≈∫ czy jeste≈õmy w katalogu projektu
if [ ! -f "VERSION" ]; then
    echo -e "${RED}‚ùå Nie znaleziono pliku VERSION. Uruchom skrypt z katalogu projektu.${NC}"
    exit 1
fi

# Sprawd≈∫ czy Python i venv sƒÖ dostƒôpne
if [ ! -d "venv" ]; then
    echo -e "${RED}‚ùå Nie znaleziono katalogu venv. Uruchom najpierw: python3 -m venv venv${NC}"
    exit 1
fi

echo -e "${YELLOW}Aktualizacja wersji: $VERSION_TYPE${NC}"

# Aktywuj venv i uruchom version_manager
source venv/bin/activate

# Uruchom odpowiedniƒÖ komendƒô
case $VERSION_TYPE in
    patch)
        echo -e "${YELLOW}Zwiƒôkszanie patch version...${NC}"
        python scripts/version_manager.py increment-patch
        ;;
    minor)
        echo -e "${YELLOW}Zwiƒôkszanie minor version...${NC}"
        python scripts/version_manager.py increment-minor
        ;;
    major)
        echo -e "${YELLOW}Zwiƒôkszanie major version...${NC}"
        python scripts/version_manager.py increment-major
        ;;
    build)
        echo -e "${YELLOW}Zwiƒôkszanie build number...${NC}"
        python scripts/version_manager.py increment-build
        ;;
    *)
        echo -e "${RED}‚ùå Nieznany typ wersji: $VERSION_TYPE${NC}"
        echo "Dostƒôpne opcje: patch, minor, major, build"
        exit 1
        ;;
esac

# Sprawd≈∫ czy aktualizacja siƒô powiod≈Ça
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Wersja zosta≈Ça zaktualizowana pomy≈õlnie!${NC}"
    
    # Poka≈º aktualnƒÖ wersjƒô
    CURRENT_VERSION=$(cat VERSION)
    echo -e "${GREEN}Aktualna wersja: $CURRENT_VERSION${NC}"
    
    # Waliduj sp√≥jno≈õƒá
    echo -e "${YELLOW}Walidacja sp√≥jno≈õci wersji...${NC}"
    python scripts/version_manager.py validate
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Wszystkie wersje sƒÖ sp√≥jne!${NC}"
        
        # Automatycznie synchronizuj Docker
        echo -e "${YELLOW}üîÑ Synchronizujƒô wersje Docker...${NC}"
        ./scripts/docker-sync-version.sh
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Docker zsynchronizowany z wersjƒÖ $CURRENT_VERSION!${NC}"
        else
            echo -e "${RED}‚ùå B≈ÇƒÖd podczas synchronizacji Docker!${NC}"
            exit 1
        fi
    else
        echo -e "${RED}‚ùå Znaleziono problemy ze sp√≥jno≈õciƒÖ wersji!${NC}"
        exit 1
    fi
else
    echo -e "${RED}‚ùå B≈ÇƒÖd podczas aktualizacji wersji!${NC}"
    exit 1
fi
