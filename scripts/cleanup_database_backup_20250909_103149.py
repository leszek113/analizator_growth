#!/usr/bin/env python3
"""
Skrypt do czyszczenia danych historycznych z bazy danych
Zachowuje konfiguracjƒô, usuwa dane historyczne
"""

import sqlite3
import os
import sys
from datetime import datetime

def cleanup_database():
    """Czy≈õci dane historyczne z bazy danych"""
    
    db_path = 'data/analizator_growth.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Baza danych nie istnieje!")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("=== CZYSZCZENIE BAZY DANYCH ===")
        print(f"Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # Lista tabel do wyczyszczenia (dane historyczne)
        tables_to_clean = [
            'analysis_runs',           # Historia uruchomie≈Ñ analizy
            'stage1_companies',        # Sp√≥≈Çki z selekcji
            'auto_schedule_runs',      # Historia uruchomie≈Ñ scheduler
            'flag_history',            # Historia zmian flag
            'company_flags',           # Aktualne flagi sp√≥≈Çek
            'company_notes'            # Notatki sp√≥≈Çek
        ]
        
        # Lista tabel do zachowania (konfiguracja)
        tables_to_keep = [
            'selection_rules_versions',        # Wersje regu≈Ç selekcji
            'informational_columns_versions',  # Wersje kolumn informacyjnych
            'stock_prices'                     # Dane historyczne cen (opcjonalnie)
        ]
        
        print("üóëÔ∏è  USUWANE TABELE (dane historyczne):")
        for table in tables_to_clean:
            try:
                cursor.execute(f'SELECT COUNT(*) FROM {table}')
                count_before = cursor.fetchone()[0]
                
                cursor.execute(f'DELETE FROM {table}')
                deleted_count = cursor.rowcount
                
                print(f"  ‚úÖ {table}: {count_before} ‚Üí 0 rekord√≥w (usuniƒôto {deleted_count})")
                
            except Exception as e:
                print(f"  ‚ùå {table}: B≈ÅƒÑD - {e}")
        
        print()
        print("üíæ ZACHOWANE TABELE (konfiguracja):")
        for table in tables_to_keep:
            try:
                cursor.execute(f'SELECT COUNT(*) FROM {table}')
                count = cursor.fetchone()[0]
                print(f"  ‚úÖ {table}: {count} rekord√≥w (zachowano)")
            except Exception as e:
                print(f"  ‚ùå {table}: B≈ÅƒÑD - {e}")
        
        # Resetuj auto-increment ID
        print()
        print("üîÑ RESETOWANIE AUTO-INCREMENT ID:")
        for table in tables_to_clean:
            try:
                cursor.execute(f'DELETE FROM sqlite_sequence WHERE name = "{table}"')
                print(f"  ‚úÖ {table}: ID zresetowane")
            except Exception as e:
                print(f"  ‚ùå {table}: B≈ÅƒÑD - {e}")
        
        # Zatwierd≈∫ zmiany
        conn.commit()
        
        print()
        print("=== PODSUMOWANIE ===")
        print("‚úÖ Baza danych wyczyszczona pomy≈õlnie!")
        print("‚úÖ Konfiguracja zachowana")
        print("‚úÖ Dane historyczne usuniƒôte")
        print("‚úÖ System gotowy do nowego startu")
        
        return True
        
    except Exception as e:
        print(f"‚ùå B≈ÅƒÑD podczas czyszczenia bazy danych: {e}")
        return False
        
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    print("üßπ CZYSZCZENIE BAZY DANYCH - ANALIZATOR GROWTH")
    print("=" * 50)
    
    # Potwierdzenie
    response = input("Czy na pewno chcesz wyczy≈õciƒá dane historyczne? (tak/nie): ")
    if response.lower() not in ['tak', 'yes', 'y']:
        print("‚ùå Anulowano czyszczenie bazy danych")
        sys.exit(0)
    
    success = cleanup_database()
    
    if success:
        print("\nüéâ CZYSZCZENIE ZAKO≈ÉCZONE POMY≈öLNIE!")
        print("System jest gotowy do nowego startu z czystƒÖ bazƒÖ danych.")
    else:
        print("\nüí• CZYSZCZENIE NIEUDANE!")
        print("Sprawd≈∫ logi b≈Çƒôd√≥w powy≈ºej.")
        sys.exit(1)
